;;; -*- Lisp -*-

;;;---------------------------------------------------------------------------
;;; Test that we can successfully create new subclasses of OPERATION and that we
;;; can detect bad subclasses of OPERATION.
;;;---------------------------------------------------------------------------


(in-package :asdf)
(use-package :asdf-test)

(defparameter *good-classes*
  '(build-op
    prepare-source-op
    prepare-op
    prepare-fasl-op
    load-op
    monolithic-load-compiled-concatenated-source-op
    prepare-fasl-op
    load-source-op
    load-compiled-concatenated-source-op
    monolithic-load-concatenated-source-op
    load-concatenated-source-op
    load-fasl-op
    compile-op
    compile-concatenated-source-op
    test-op
    fasl-op
    program-op
    monolithic-compile-concatenated-source-op
    monolithic-dll-op
    monolithic-binary-op
    monolithic-fasl-op
    dll-op
    concatenate-source-op
    monolithic-lib-op
    monolithic-concatenate-source-op
    lib-op)
  "All of these classes should be instantiable without error.")

(defclass my-unupdated-operation (operation)
  ())

(defclass my-good-operation (downward-operation)
  ())

(defclass my-incoherent-operation (downward-operation non-propagating-operation)
  ())

(dolist (class *good-classes*) (assert (make-instance class)))

(signals operation-definition-warning
         (make-instance 'my-unupdated-operation))

#-gcl
(signals operation-definition-error
         (make-instance 'my-incoherent-operation))

(assert (make-instance 'my-good-operation))


;; This test exercises the backward-compatibility mechanism of operation,
;; whereby traditional unqualified operations are implicitly downward and sideward
(defclass trivial-operation (operation) ())

(assert-equal
 (loop :for (o . c) :in (traverse 'trivial-operation '(:test-asdf/test-module-depend "quux"))
       :collect (cons (type-of o) (component-find-path c)))
 '((trivial-operation "test-asdf/test-module-depend" "file1")
   (trivial-operation "test-asdf/test-module-depend" "quux" "file2")
   (trivial-operation "test-asdf/test-module-depend" "quux" "file3mod" "file3")
   (trivial-operation "test-asdf/test-module-depend" "quux" "file3mod")
   (trivial-operation "test-asdf/test-module-depend" "quux")))
